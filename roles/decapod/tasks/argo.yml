---
- name: check argo client binary exists
  stat:
    path: "{{ role_path }}/files/{{ argo_client_binary_name }}.gz"
  register: stat_argo_cli_result
  tags: download

- name: download argo client binary
  shell: >-
    curl -L {{ argo_client_url }} -o {{ role_path }}/files/{{ argo_client_binary_name }}.gz
  when: not stat_argo_cli_result.stat.exists
  tags: download

- name: check argo client installed
  stat:
    path: "{{ bin_dir }}/argo"
  register: stat_argo_bin_result

- name: install argo client
  shell: >-
    gunzip {{ role_path }}/files/{{ argo_client_binary_name }}.gz -c > {{ role_path }}/files/{{ argo_client_binary_name }} && chmod +x {{ role_path }}/files/{{ argo_client_binary_name }} && cp {{ role_path }}/files/{{ argo_client_binary_name }} {{ bin_dir }}/argo
  become: true
  when: not stat_argo_bin_result.stat.exists

- name: granting admin privileges into default serviceaccount
  shell: >-
    {{ bin_dir }}/kubectl create rolebinding default-admin --clusterrole=admin --serviceaccount=argo:default -n argo
  become: false
  ignore_errors: True
