bin_dir: /usr/local/bin

# Container registry
container_registry_enabled: false
container_registries: []

# TODO: this value is better to be set via set_fact later so that
# the value wouldn't be touched when we use upstream k8s images.
container_registry_url: >-
  {%- if container_registry_enabled -%}{{ groups['container-registry'][0] }}:5000
  {%- elif container_registries and container_registries[0].default -%}{{ container_registries[0].endpoint }}
  {%- else -%}""
  {%- endif -%}
docker_insecure_registries: []

# Repositories
pip_repo_url: ""
pkg_repo_url: ""
k8s_binary_repo_url: ""

# Storage configurations: rook-ceph or nfs
taco_storage_backend: "rook-ceph"
taco_storageclass_name: "taco-storage"

# Taco Apps to deploy using Armada
taco_apps: ["openstack"]

# These images are managed by TACO
openstackclient_image_repo: "docker.io/sktdev/openstackclient"
openstackclient_image_tag: "stein"

# These values are shared by container-registry and prepare-artifact role
# Do not use full URL such as 'docker.io/registry' since it doesn't work.
container_registry_image_repo: "registry"
container_registry_image_tag: "2.6.2"

# This affects tasks related to the TACO/SONA integrated environment.
sona_integration: false

# fill TACOFIXME to site specific values to assert
var_assert_enabled: false

# Workaround for missing 'Python Interpreter Discovery' feature in ansible 2.7
ansible_python_interpreter: /usr/bin/python

# decide if k8s images are excluded in the artifact by site-prepare job
exclude_k8s_images: false

# If set to false, one can't deploy a cluster with the same cluster_name as existing one.
# If set to true, the new deployment overwrites existing one, if same cluster name is used.
allow_redeployment: false

# Versions files
versions_kubespray_default: "./kubespray/roles/download/defaults/main.yml"
versions_taco_istio: "./roles/taco-apps/istio/deploy/defaults/main.yml"
versions_kubespray_docker: "./kubespray/roles/container-engine/docker/defaults/main.yml"
taco_version: "v20.08"
version_namespace: "default"
